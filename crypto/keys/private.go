// Copyright 2016 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package keys

import (
	"context"
	"crypto"
	"crypto/ecdsa"
	"crypto/elliptic"
	"crypto/rand"
	"crypto/rsa"
	"crypto/x509"
	"encoding/pem"
	"errors"
	"fmt"
	"io/ioutil"

	"github.com/google/trillian"
	"github.com/google/trillian/crypto/sigpb"
)

// rsaKeySizeInBits is the number of bits used by RSA private keys generated by this package.
const rsaKeySizeInBits = 4096

// Provider handles acquisition of signers for trees.
type Provider interface {
	// Signer returns a signer for the given tree.
	Signer(context.Context, *trillian.Tree) (crypto.Signer, error)
	// Generate creates a new private key for the given tree.
	Generate(context.Context, *trillian.Tree) error
}

// NewFromPrivatePEMFile reads a PEM-encoded private key from a file.
// The key may be protected by a password.
func NewFromPrivatePEMFile(keyFile, keyPassword string) (crypto.Signer, error) {
	pemData, err := ioutil.ReadFile(keyFile)
	if err != nil {
		return nil, fmt.Errorf("failed to read private key from file %q: %v", keyFile, err)
	}

	k, err := NewFromPrivatePEM(string(pemData), keyPassword)
	if err != nil {
		return nil, fmt.Errorf("failed to decode private key from file %q: %v", keyFile, err)
	}

	return k, nil
}

// NewFromPrivatePEM reads a PEM-encoded private key from a string.
// The key may be protected by a password.
func NewFromPrivatePEM(pemEncodedKey, password string) (crypto.Signer, error) {
	block, rest := pem.Decode([]byte(pemEncodedKey))
	if len(rest) > 0 {
		return nil, errors.New("extra data found after PEM decoding")
	}

	der := block.Bytes
	if password != "" {
		pwdDer, err := x509.DecryptPEMBlock(block, []byte(password))
		if err != nil {
			return nil, err
		}
		der = pwdDer
	}

	return parsePrivateKey(der)
}

// Generate creates a new private key for the given signature algorithm.
// If the signature algorithm is ECDSA, a P-256 EC private key will be generated.
// If the signature algorithm is RSA, a PKCS1 4096-bit RSA private key will be generated.
func Generate(sigAlgo sigpb.DigitallySigned_SignatureAlgorithm) (crypto.PrivateKey, error) {
	switch sigAlgo {
	case sigpb.DigitallySigned_ECDSA:
		return ecdsa.GenerateKey(elliptic.P256(), rand.Reader)
	case sigpb.DigitallySigned_RSA:
		return rsa.GenerateKey(rand.Reader, rsaKeySizeInBits)
	}

	return nil, fmt.Errorf("unsupported signature algorithm: %v", sigAlgo)
}

// ToPrivateDER serializes a private key as ASN.1 DER.
func ToPrivateDER(key crypto.PrivateKey) ([]byte, error) {
	switch key := key.(type) {
	case *ecdsa.PrivateKey:
		return x509.MarshalECPrivateKey(key)
	case *rsa.PrivateKey:
		return x509.MarshalPKCS1PrivateKey(key), nil
	}

	return nil, fmt.Errorf("unsupported key type: %T", key)
}

// ToPrivatePEM serializes a private key as PEM.
// If a password is provided, the key will be encrypted using AES-256.
func ToPrivatePEM(key crypto.PrivateKey, password string) (*pem.Block, error) {
	der, err := ToPrivateDER(key)
	if err != nil {
		return nil, err
	}

	pemBlock := pem.Block{
		Bytes: der,
	}

	switch key := key.(type) {
	case *ecdsa.PrivateKey:
		pemBlock.Type = "EC PRIVATE KEY"
	case *rsa.PrivateKey:
		pemBlock.Type = "RSA PRIVATE KEY"
	default:
		return nil, fmt.Errorf("unsupported key type: %T", key)
	}

	// If a password was provided, encrypt the private key using it.
	if password != "" {
		pemBlock, err = x509.EncryptPEMBlock(rand.Reader, pemBlock.Type, pemBlock.Bytes, []byte(keyInfo.Password), x509.PEMCipherAES256)
		if err != nil {
			return nil, err
		}
	}

	return &pemBlock, nil
}

func parsePrivateKey(rawKey []byte) (crypto.Signer, error) {
	key1, err1 := x509.ParsePKCS1PrivateKey(rawKey)
	if err1 == nil {
		return key1, nil
	}

	key2, err2 := x509.ParsePKCS8PrivateKey(rawKey)
	if err2 == nil {
		switch key2 := key2.(type) {
		case *ecdsa.PrivateKey:
			return key2, nil
		case *rsa.PrivateKey:
			return key2, nil
		}
		return nil, fmt.Errorf("got %T, want *{ecdsa,rsa}.PrivateKey", key2)
	}

	key3, err3 := x509.ParseECPrivateKey(rawKey)
	if err3 == nil {
		return key3, nil
	}

	return nil, fmt.Errorf("could not parse private key as PKCS1 (%v), PKCS8 (%v), or SEC1 (%v)", err1, err2, err3)
}

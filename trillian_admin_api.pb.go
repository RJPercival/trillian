// Code generated by protoc-gen-go.
// source: trillian_admin_api.proto
// DO NOT EDIT!

package trillian

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import keyspb "github.com/google/trillian/crypto/keyspb"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf2 "google.golang.org/genproto/protobuf/field_mask"
import google_protobuf3 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// ListTrees request.
// No filters or pagination options are provided.
type ListTreesRequest struct {
}

func (m *ListTreesRequest) Reset()                    { *m = ListTreesRequest{} }
func (m *ListTreesRequest) String() string            { return proto.CompactTextString(m) }
func (*ListTreesRequest) ProtoMessage()               {}
func (*ListTreesRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

// ListTrees response.
// No pagination is provided, all trees the requester has access to are
// returned.
type ListTreesResponse struct {
	// Trees matching the list request filters.
	Tree []*Tree `protobuf:"bytes,1,rep,name=tree" json:"tree,omitempty"`
}

func (m *ListTreesResponse) Reset()                    { *m = ListTreesResponse{} }
func (m *ListTreesResponse) String() string            { return proto.CompactTextString(m) }
func (*ListTreesResponse) ProtoMessage()               {}
func (*ListTreesResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *ListTreesResponse) GetTree() []*Tree {
	if m != nil {
		return m.Tree
	}
	return nil
}

// GetTree request.
type GetTreeRequest struct {
	// ID of the tree to retrieve.
	TreeId int64 `protobuf:"varint,1,opt,name=tree_id,json=treeId" json:"tree_id,omitempty"`
}

func (m *GetTreeRequest) Reset()                    { *m = GetTreeRequest{} }
func (m *GetTreeRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTreeRequest) ProtoMessage()               {}
func (*GetTreeRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *GetTreeRequest) GetTreeId() int64 {
	if m != nil {
		return m.TreeId
	}
	return 0
}

// CreateTree request.
type CreateTreeRequest struct {
	// Tree to be created. See Tree and CreateTree for more details.
	Tree *Tree `protobuf:"bytes,1,opt,name=tree" json:"tree,omitempty"`
	// Describes how the tree's private key should be generated.
	// Only needs to be set if tree.private_key is not set.
	KeySpec *keyspb.Specification `protobuf:"bytes,2,opt,name=key_spec,json=keySpec" json:"key_spec,omitempty"`
	// Contains the path to a PKCS#11 module to use.
	// Only needs to be set if tree.private_key is of the type PKCS11Config
	Pkcs11ModulePath string `protobuf:"bytes,3,opt,name=pkcs11_module_path,json=pkcs11ModulePath" json:"pkcs11_module_path,omitempty"`
}

func (m *CreateTreeRequest) Reset()                    { *m = CreateTreeRequest{} }
func (m *CreateTreeRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateTreeRequest) ProtoMessage()               {}
func (*CreateTreeRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *CreateTreeRequest) GetTree() *Tree {
	if m != nil {
		return m.Tree
	}
	return nil
}

func (m *CreateTreeRequest) GetKeySpec() *keyspb.Specification {
	if m != nil {
		return m.KeySpec
	}
	return nil
}

func (m *CreateTreeRequest) GetPkcs11ModulePath() string {
	if m != nil {
		return m.Pkcs11ModulePath
	}
	return ""
}

// UpdateTree request.
type UpdateTreeRequest struct {
	// Tree to be updated.
	Tree *Tree `protobuf:"bytes,1,opt,name=tree" json:"tree,omitempty"`
	// Fields modified by the update request.
	// For example: "tree_state", "display_name", "description".
	UpdateMask *google_protobuf2.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask" json:"update_mask,omitempty"`
}

func (m *UpdateTreeRequest) Reset()                    { *m = UpdateTreeRequest{} }
func (m *UpdateTreeRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateTreeRequest) ProtoMessage()               {}
func (*UpdateTreeRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *UpdateTreeRequest) GetTree() *Tree {
	if m != nil {
		return m.Tree
	}
	return nil
}

func (m *UpdateTreeRequest) GetUpdateMask() *google_protobuf2.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

// DeleteTree request.
type DeleteTreeRequest struct {
	// ID of the tree to delete.
	TreeId int64 `protobuf:"varint,1,opt,name=tree_id,json=treeId" json:"tree_id,omitempty"`
}

func (m *DeleteTreeRequest) Reset()                    { *m = DeleteTreeRequest{} }
func (m *DeleteTreeRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteTreeRequest) ProtoMessage()               {}
func (*DeleteTreeRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *DeleteTreeRequest) GetTreeId() int64 {
	if m != nil {
		return m.TreeId
	}
	return 0
}

func init() {
	proto.RegisterType((*ListTreesRequest)(nil), "trillian.ListTreesRequest")
	proto.RegisterType((*ListTreesResponse)(nil), "trillian.ListTreesResponse")
	proto.RegisterType((*GetTreeRequest)(nil), "trillian.GetTreeRequest")
	proto.RegisterType((*CreateTreeRequest)(nil), "trillian.CreateTreeRequest")
	proto.RegisterType((*UpdateTreeRequest)(nil), "trillian.UpdateTreeRequest")
	proto.RegisterType((*DeleteTreeRequest)(nil), "trillian.DeleteTreeRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TrillianAdmin service

type TrillianAdminClient interface {
	// Lists all trees the requester has access to.
	ListTrees(ctx context.Context, in *ListTreesRequest, opts ...grpc.CallOption) (*ListTreesResponse, error)
	// Retrieves a tree by ID.
	GetTree(ctx context.Context, in *GetTreeRequest, opts ...grpc.CallOption) (*Tree, error)
	// Creates a new tree.
	// System-generated fields are not required and will be ignored if present,
	// e.g.: tree_id, create_time and update_time.
	// Returns the created tree, with all system-generated fields assigned.
	CreateTree(ctx context.Context, in *CreateTreeRequest, opts ...grpc.CallOption) (*Tree, error)
	// Updates a tree.
	// See Tree for details. Readonly fields cannot be updated.
	UpdateTree(ctx context.Context, in *UpdateTreeRequest, opts ...grpc.CallOption) (*Tree, error)
	// Soft-deletes a tree.
	// A soft-deleted tree may be undeleted for a certain period, after which
	// it'll be permanently deleted.
	// TODO(codingllama): Provide an undelete RPC.
	DeleteTree(ctx context.Context, in *DeleteTreeRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
}

type trillianAdminClient struct {
	cc *grpc.ClientConn
}

func NewTrillianAdminClient(cc *grpc.ClientConn) TrillianAdminClient {
	return &trillianAdminClient{cc}
}

func (c *trillianAdminClient) ListTrees(ctx context.Context, in *ListTreesRequest, opts ...grpc.CallOption) (*ListTreesResponse, error) {
	out := new(ListTreesResponse)
	err := grpc.Invoke(ctx, "/trillian.TrillianAdmin/ListTrees", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trillianAdminClient) GetTree(ctx context.Context, in *GetTreeRequest, opts ...grpc.CallOption) (*Tree, error) {
	out := new(Tree)
	err := grpc.Invoke(ctx, "/trillian.TrillianAdmin/GetTree", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trillianAdminClient) CreateTree(ctx context.Context, in *CreateTreeRequest, opts ...grpc.CallOption) (*Tree, error) {
	out := new(Tree)
	err := grpc.Invoke(ctx, "/trillian.TrillianAdmin/CreateTree", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trillianAdminClient) UpdateTree(ctx context.Context, in *UpdateTreeRequest, opts ...grpc.CallOption) (*Tree, error) {
	out := new(Tree)
	err := grpc.Invoke(ctx, "/trillian.TrillianAdmin/UpdateTree", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trillianAdminClient) DeleteTree(ctx context.Context, in *DeleteTreeRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/trillian.TrillianAdmin/DeleteTree", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TrillianAdmin service

type TrillianAdminServer interface {
	// Lists all trees the requester has access to.
	ListTrees(context.Context, *ListTreesRequest) (*ListTreesResponse, error)
	// Retrieves a tree by ID.
	GetTree(context.Context, *GetTreeRequest) (*Tree, error)
	// Creates a new tree.
	// System-generated fields are not required and will be ignored if present,
	// e.g.: tree_id, create_time and update_time.
	// Returns the created tree, with all system-generated fields assigned.
	CreateTree(context.Context, *CreateTreeRequest) (*Tree, error)
	// Updates a tree.
	// See Tree for details. Readonly fields cannot be updated.
	UpdateTree(context.Context, *UpdateTreeRequest) (*Tree, error)
	// Soft-deletes a tree.
	// A soft-deleted tree may be undeleted for a certain period, after which
	// it'll be permanently deleted.
	// TODO(codingllama): Provide an undelete RPC.
	DeleteTree(context.Context, *DeleteTreeRequest) (*google_protobuf3.Empty, error)
}

func RegisterTrillianAdminServer(s *grpc.Server, srv TrillianAdminServer) {
	s.RegisterService(&_TrillianAdmin_serviceDesc, srv)
}

func _TrillianAdmin_ListTrees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTreesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrillianAdminServer).ListTrees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trillian.TrillianAdmin/ListTrees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrillianAdminServer).ListTrees(ctx, req.(*ListTreesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrillianAdmin_GetTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrillianAdminServer).GetTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trillian.TrillianAdmin/GetTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrillianAdminServer).GetTree(ctx, req.(*GetTreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrillianAdmin_CreateTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrillianAdminServer).CreateTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trillian.TrillianAdmin/CreateTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrillianAdminServer).CreateTree(ctx, req.(*CreateTreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrillianAdmin_UpdateTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrillianAdminServer).UpdateTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trillian.TrillianAdmin/UpdateTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrillianAdminServer).UpdateTree(ctx, req.(*UpdateTreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrillianAdmin_DeleteTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrillianAdminServer).DeleteTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trillian.TrillianAdmin/DeleteTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrillianAdminServer).DeleteTree(ctx, req.(*DeleteTreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TrillianAdmin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "trillian.TrillianAdmin",
	HandlerType: (*TrillianAdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListTrees",
			Handler:    _TrillianAdmin_ListTrees_Handler,
		},
		{
			MethodName: "GetTree",
			Handler:    _TrillianAdmin_GetTree_Handler,
		},
		{
			MethodName: "CreateTree",
			Handler:    _TrillianAdmin_CreateTree_Handler,
		},
		{
			MethodName: "UpdateTree",
			Handler:    _TrillianAdmin_UpdateTree_Handler,
		},
		{
			MethodName: "DeleteTree",
			Handler:    _TrillianAdmin_DeleteTree_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trillian_admin_api.proto",
}

func init() { proto.RegisterFile("trillian_admin_api.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 535 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x54, 0xc1, 0x6e, 0xd3, 0x4a,
	0x14, 0x7d, 0x6e, 0x9e, 0x9a, 0xf6, 0x56, 0x44, 0xcd, 0xa0, 0x42, 0xea, 0x56, 0xa2, 0x1a, 0xb1,
	0x28, 0x51, 0x65, 0x93, 0x00, 0x42, 0x02, 0xb1, 0x68, 0x81, 0x22, 0x24, 0x2a, 0x45, 0x26, 0x88,
	0xa5, 0xe5, 0xc4, 0x93, 0x74, 0x14, 0x3b, 0x1e, 0x3c, 0x63, 0xa4, 0x08, 0xb1, 0xe1, 0x17, 0x58,
	0xf0, 0x61, 0xf0, 0x09, 0x7c, 0x08, 0x33, 0xe3, 0x71, 0x6d, 0xc7, 0x2d, 0x0b, 0x36, 0x89, 0x7d,
	0xcf, 0xb9, 0xf7, 0x1e, 0x9f, 0x63, 0x0f, 0xf4, 0x44, 0x4a, 0xa3, 0x88, 0x06, 0x4b, 0x3f, 0x08,
	0x63, 0x2a, 0x7f, 0x19, 0x75, 0x58, 0x9a, 0x88, 0x04, 0x6d, 0x15, 0x88, 0xdd, 0x29, 0xae, 0x72,
	0xc4, 0x7e, 0x32, 0xa7, 0xe2, 0x32, 0x9b, 0x38, 0xd3, 0x24, 0x76, 0xe7, 0x49, 0x32, 0x8f, 0x88,
	0x5b, 0x30, 0xdc, 0x69, 0xba, 0x62, 0x22, 0x71, 0x17, 0x64, 0xc5, 0xd9, 0xc4, 0xfc, 0x99, 0xb6,
	0x43, 0xc3, 0x95, 0x2b, 0xdc, 0x60, 0xb9, 0x4c, 0x44, 0x20, 0x68, 0xb2, 0xe4, 0x06, 0x3d, 0x32,
	0xa8, 0xbe, 0x9b, 0x64, 0x33, 0x77, 0x46, 0x49, 0x14, 0xfa, 0x71, 0xc0, 0x17, 0x86, 0x71, 0xb0,
	0xce, 0x20, 0x31, 0x13, 0xab, 0x1c, 0xc4, 0x08, 0x76, 0xdf, 0x51, 0x2e, 0xc6, 0x29, 0x21, 0xdc,
	0x23, 0x9f, 0x32, 0xc2, 0x05, 0x7e, 0x0a, 0xdd, 0x4a, 0x8d, 0x33, 0xb9, 0x8c, 0x20, 0x0c, 0xff,
	0x0b, 0x59, 0xe8, 0x59, 0x47, 0xad, 0xe3, 0x9d, 0x61, 0xc7, 0xb9, 0x7a, 0x36, 0x45, 0xf3, 0x34,
	0x86, 0x1f, 0x40, 0xe7, 0x0d, 0xd1, 0x7d, 0x66, 0x14, 0xba, 0x0b, 0x6d, 0x85, 0xf8, 0x34, 0x94,
	0x8d, 0xd6, 0x71, 0xcb, 0xdb, 0x54, 0xb7, 0x6f, 0x43, 0xfc, 0xc3, 0x82, 0xee, 0xcb, 0x94, 0x04,
	0x82, 0x54, 0xe9, 0xe5, 0x12, 0xeb, 0xa6, 0x25, 0xe8, 0x21, 0x6c, 0x49, 0x7b, 0x7c, 0xce, 0xc8,
	0xb4, 0xb7, 0xa1, 0x79, 0x7b, 0x8e, 0xf1, 0xeb, 0xbd, 0xac, 0xd1, 0x19, 0x9d, 0x6a, 0x83, 0xbc,
	0xb6, 0xac, 0xaa, 0x0a, 0x3a, 0x01, 0xc4, 0x16, 0x53, 0x3e, 0x18, 0xf8, 0x71, 0x12, 0x66, 0x11,
	0xf1, 0x59, 0x20, 0x2e, 0x7b, 0x2d, 0xd9, 0xbb, 0xed, 0xed, 0xe6, 0xc8, 0x85, 0x06, 0x46, 0xb2,
	0x8e, 0x05, 0x74, 0x3f, 0xb0, 0xf0, 0x1f, 0x84, 0x3d, 0x87, 0x9d, 0x4c, 0x37, 0x6a, 0xf3, 0x8d,
	0x36, 0xdb, 0xc9, 0xdd, 0x77, 0x0a, 0xf7, 0x9d, 0x73, 0x95, 0xcf, 0x85, 0x64, 0x78, 0x90, 0xd3,
	0xd5, 0x35, 0x3e, 0x81, 0xee, 0x2b, 0x12, 0x91, 0xfa, 0xd6, 0x9b, 0xdc, 0x1b, 0xfe, 0x6a, 0xc1,
	0xad, 0xb1, 0x91, 0x70, 0xaa, 0xde, 0x3f, 0x74, 0x0e, 0xdb, 0x57, 0x99, 0x21, 0xbb, 0xd4, 0xb7,
	0x1e, 0xae, 0x7d, 0x70, 0x2d, 0x96, 0x87, 0x8c, 0xff, 0x43, 0x1f, 0xa1, 0x6d, 0x22, 0x44, 0xbd,
	0x92, 0x59, 0x4f, 0xd5, 0x5e, 0x7b, 0x7e, 0x8c, 0xbf, 0xfd, 0xfc, 0xfd, 0x7d, 0xe3, 0x10, 0xd9,
	0xee, 0xe7, 0xc1, 0x84, 0x88, 0x60, 0xe0, 0x2a, 0x9d, 0xdc, 0xfd, 0x62, 0xd4, 0xbf, 0xe8, 0x7f,
	0x45, 0x63, 0x80, 0x32, 0x6f, 0x54, 0x51, 0xd1, 0x78, 0x0b, 0x1a, 0xe3, 0xf7, 0xf5, 0xf8, 0xdb,
	0xb8, 0x53, 0x1f, 0xff, 0xcc, 0xea, 0x23, 0x02, 0x50, 0x86, 0x55, 0x9d, 0xda, 0x88, 0xb0, 0x31,
	0xb5, 0xaf, 0xa7, 0xde, 0x1f, 0xde, 0xbb, 0x4e, 0xb4, 0x53, 0x2a, 0x37, 0x6b, 0xca, 0x74, 0xaa,
	0x6b, 0x1a, 0x99, 0xd9, 0x77, 0x1a, 0x81, 0xbf, 0x56, 0x9f, 0x5b, 0xe1, 0x51, 0xff, 0x2f, 0x1e,
	0x9d, 0x3d, 0x86, 0x7d, 0x79, 0x36, 0x14, 0x03, 0xea, 0xa7, 0xc7, 0xd9, 0x5e, 0x2d, 0xf0, 0x53,
	0x46, 0x47, 0xaa, 0x3c, 0xb2, 0x26, 0x9b, 0x1a, 0x7f, 0xf4, 0x27, 0x00, 0x00, 0xff, 0xff, 0xee,
	0x65, 0x9e, 0x01, 0x93, 0x04, 0x00, 0x00,
}
